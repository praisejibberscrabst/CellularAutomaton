import java.util.Arrays;
class CellularAutomaton {
  int w = 8;
  int[][] board;
  int columns, rows;

  CellularAutomaton() {
    columns = width/w;
    rows = height/w;
    board = new int[columns][rows];
  }

  void generate(int gen, int rule) {
    // Initialize first generation to random numbers (0 or 1)
    if (gen == 0) {
      for (int i = 0; i < columns; i ++) {
        board[i][0] = (int) random(2);
      }
      return;
    }
    int[] nextGeneration = new int[columns];

    // Determine neighborhood of first cell and last cell in previous Generation (wraps around)
    int[] n1 = {board[columns - 1][gen - 1], board[0][gen - 1], board[1][gen - 1]};
    int[] n2 = {board[columns - 2][gen - 1], board[columns - 1][gen - 1], board[0][gen - 1]};
    nextGeneration[0] = ruleset(n1, rule);
    nextGeneration[columns - 1] = ruleset(n2, rule);

    // Determine neighborhood of every cell
    for (int i = 1; i < columns - 1; i ++) {
      int[] neighborhood = new int[3];
      for (int j = -1; j <= 1; j ++) {
        neighborhood[j + 1] = board[(j + i + columns) % columns][gen - 1];
      }
      nextGeneration[i] = ruleset(neighborhood, rule);
    }

    // Stack nextGeneration below previous Generation on board
    for (int c = 0; c < columns; c ++) {
      board[c][gen] = nextGeneration[c];
    }
  }

  void display(int gen) {
    String thisGen = "";

    // Color board with black (0) and white (1) squares
    for (int i = 0; i < columns; i ++) {
      if ((board[i][gen] == 1)) {
        fill(255);
      } else {
        fill(0);
      }
      stroke(0);
      rect(i * w, gen * w, w, w);
      thisGen += board[i][gen] + " ";
    }

    // Print out Generation
    println("Generation " + (gen) + ": \n" + thisGen);
  }

  int ruleset(int[] neighborhood, int ruleNumber) {
    String s = "";
    for (int n : neighborhood) {
      s += n;
    }
    
    // Sierpinski
    if (ruleNumber == 126) {
      if (s.equals("111")) {
      return 0;
      } else if (s.equals("110")) {
      return 1;
      } else if (s.equals("101")) {
      return 1;
      } else if (s.equals("100")) {
      return 1;
      } else if (s.equals("011")) {
      return 1;
      } else if (s.equals("010")) {
      return 1;
      } else if (s.equals("001")) {
      return 1;
      } else if (s.equals("000")) {
      return 0;
      } 
    }
    
    // Alternate Sierpinski
    else if (ruleNumber == 22) {
      if (s.equals("111")) {
        return 0;
      } else if (s.equals("110")) {
        return 0;
      } else if (s.equals("101")) {
        return 0;
      } else if (s.equals("100")) {
        return 1;
      } else if (s.equals("011")) {
        return 0;
      } else if (s.equals("010")) {
        return 1;
      } else if (s.equals("001")) {
        return 1;
      } else if (s.equals("000")) {
        return 0;
      } 
    }
    
    // Vertical triangles
    else if (ruleNumber == 54) {
      if (s.equals("111")) {
      return 0;
      } else if (s.equals("110")) {
      return 0;
      } else if (s.equals("101")) {
      return 1;
      } else if (s.equals("100")) {
      return 1;
      } else if (s.equals("011")) {
      return 0;
      } else if (s.equals("010")) {
      return 1;
      } else if (s.equals("001")) {
      return 1;
      } else if (s.equals("000")) {
      return 0;
      } 
    }
    
    // Diagonals
    else if (ruleNumber == 63) {
      if (s.equals("111")) {
      return 0;
      } else if (s.equals("110")) {
      return 0;
      } else if (s.equals("101")) {
      return 1;
      } else if (s.equals("100")) {
      return 1;
      } else if (s.equals("011")) {
      return 1;
      } else if (s.equals("010")) {
      return 1;
      } else if (s.equals("001")) {
      return 1;
      } else if (s.equals("000")) {
      return 1;
      }
    }
    
    // Vertical lines with tracks
    else if (ruleNumber == 92) {
      if (s.equals("111")) {
      return 0;
      } else if (s.equals("110")) {
      return 1;
      } else if (s.equals("101")) {
      return 0;
      } else if (s.equals("100")) {
      return 1;
      } else if (s.equals("011")) {
      return 1;
      } else if (s.equals("010")) {
      return 1;
      } else if (s.equals("001")) {
      return 1;
      } else if (s.equals("000")) {
      return 0;
      }
    }
    
    // Triangles rotated 45 degrees
    else if (ruleNumber == 102) {
      if (s.equals("111")) {
      return 0;
      } else if (s.equals("110")) {
      return 1;
      } else if (s.equals("101")) {
      return 1;
      } else if (s.equals("100")) {
      return 0;
      } else if (s.equals("011")) {
      return 0;
      } else if (s.equals("010")) {
      return 1;
      } else if (s.equals("001")) {
      return 1;
      } else if (s.equals("000")) {
      return 0;
      }
    }
    
    else if (ruleNumber == 15) {
      if (s.equals("111")) {
      return 0;
      } else if (s.equals("110")) {
      return 0;
      } else if (s.equals("101")) {
      return 0;
      } else if (s.equals("100")) {
      return 0;
      } else if (s.equals("011")) {
      return 1;
      } else if (s.equals("010")) {
      return 1;
      } else if (s.equals("001")) {
      return 1;
      } else if (s.equals("000")) {
      return 1;
      }
    }
    
    else if (ruleNumber == 13) {
      if (s.equals("111")) {
      return 1;
      } else if (s.equals("110")) {
      return 0;
      } else if (s.equals("101")) {
      return 1;
      } else if (s.equals("100")) {
      return 0;
      } else if (s.equals("011")) {
      return 1;
      } else if (s.equals("010")) {
      return 0;
      } else if (s.equals("001")) {
      return 0;
      } else if (s.equals("000")) {
      return 1;
      }
    }
  
    return 0;



  }
}
